left_join(tourism, by = c("Region", "State", "Purpose"), multiple = "all") +
ggplot(aes(x = Quarter, y = Trips)) +
geom_line()
tourism %>%
features(Trips, feat_stl) %>%
filter(seasonal_strength_year == max(seasonal_strength_year)) %>%
left_join(tourism, by = c("Region", "State", "Purpose"), multiple = "all") %>%
ggplot(aes(x = Quarter, y = Trips)) +
geom_line()
tourism %>%
features(Trips, feat_stl) %>%
filter(seasonal_strength_year == max(seasonal_strength_year)) %>%
left_join(tourism, by = c("Region", "State", "Purpose"), multiple = "all") %>%
ggplot(aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State, Region, Purpose))
tourism_feat <- tourism %>% features(Trips, feature_set(pkgs = "feasts"))
tourism
tourism_feat
help(select_at)
tourism_feat %>%
select_at(vars(contains("season"), Purpose))
tourism_feat %>%
select_at(vars(contains("season"), Purpose)) %>%
mutate(
seasonal_peak_year = seasonal_peak_year +
4*(seasonal_peak_year==0),
seasonal_trough_year = seasonal_trough_year +
4*(seasonal_trough_year==0),
seasonal_peak_year = glue("Q{seasonal_peak_year}"),
seasonal_trough_year = glue("Q{seasonal_trough_year}"),
) %>%
GGally::ggpairs(mapping = aes(colour = Purpose))
library(glue)
tourism_feat %>%
select_at(vars(contains("season"), Purpose)) %>%
mutate(
seasonal_peak_year = seasonal_peak_year +
4*(seasonal_peak_year==0),
seasonal_trough_year = seasonal_trough_year +
4*(seasonal_trough_year==0),
seasonal_peak_year = glue("Q{seasonal_peak_year}"),
seasonal_trough_year = glue("Q{seasonal_trough_year}"),
) %>%
GGally::ggpairs(mapping = aes(colour = Purpose))
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(fpp3)
library(tidymodels)
library(skimr)
library(readr)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
gdppc <- global_economy %>%
mutate(GDP_PC = GDP / Population)
gdppc %>%
filter(Country == "Sweeden") %>%
autoplot(GDP_PC)
gdppc <- global_economy %>%
mutate(GDP_PC = GDP / Population)
gdppc %>%
filter(Country == "Sweden") %>%
autoplot(GDP_PC)
timeSeries_lm <- TSLM(GDP_PC ~ trend())
help(model)
timeSeries_lm_fit <- gdppc %>% model(timeSeries_lm)
timeSeries_lm_fit
timeSeries_lm_fit %>% filter(Country =="Canada") %>% unnest(timeSeries_lm)
timeSeries_lm_fit %>% filter(Country =="Canada")
timeSeries_lm_fit %>% filter(Country =="Canada") %>% unnest()
timeSeries_lm_fit %>% filter(Country =="Canada") %>% report()
help(report)
timeSeries_lm_fit %>% forecast(h = 3)
timeSeries_lm_fit %>% forecast(h = 3) %>%
filter(Country == "Canada") %>%
autoplot(gdppc)
help("filter_index")
aus_production
bricks <- aus_production %>%
filter_index("1970 Q1" ~ "2004 Q4") %>%
select(Bricks)
bricks %>% model(MEAN(Bricks)) %>% autoplot()
bricks %>% model(MEAN(Bricks))
bricks %>% model(MEAN(Bricks)) %>% autoplot(Bricks)
train <- aus_production %>%
filter_index("1992 Q1" ~ "2006 Q4")
beer_fit <- train %>%
model(
Mean = MEAN(Beer),
Naive = NAIVE(Beer),
S_Naive = SNAIVE(Beer)
)
beer_fc <- beer_fit %>% forecast(h = 14)
beer_fc %>% autoplot(train, level = NULL)
beer_fc %>% autoplot(train, level = NULL)
beer_fc %>% autoplot(train, level = NULL)
help(autolayer)
beer_fc %>% autoplot(train, level = NULL)
beer_fc %>% autoplot(train, level = NULL) %>%
autolayer(
filter_index(aus_production, "2007 Q1" ~ .),
colour = "black"
)
beer_fc %>% autoplot(train, level = NULL)
beer_fc %>% autoplot(train, level = NULL) +
autolayer(
filter_index(aus_production, "2007 Q1" ~ .),
colour = "black"
)
augment(beer_fit)
google_2015 <- google_stock |> filter(year(Date) == 2015)
google_stock <- gafa_stock %>%
filter(Symbol == "GOOG", year(Date) >= 2015) %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
# Filter the year of interest
google_2015 <- google_stock |> filter(year(Date) == 2015)
google_2015
google_aug <- google_2015 %>% augment()
google_aug <- google_2015 %>%
model(NAIVE(Close)) %>%
augment()
google_aug
autoplot(google_aug, .innov)
google_aug %>%
ggplot(aes(x = .innov)) +
geom_histogram()
google_2015 %>% ACF(.innov) %>% autoplot()
google_aug %>%
ggplot(aes(x = .innov)) +
geom_histogram()
google_aug %>% ACF(.innov) %>% autoplot()
google_aug %>% gg_tsresiduals()
google_2015 %>% model(NAIVE(Close)) %>% gg_tsresiduals()
google_aug %>% features(.innov, box_pierce, lag = 10)
google_aug %>% features(.innov, ljung_box, lag = 10)
google_fit_drift <- google_2015 %>% model(RW(Close ~ drift()))
google_fit_drift %>% tidy()
google_fit_drift %>% augment() %>% features(.innov, ljung_box, lag = 10)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(fpp3)
library(tidymodels)
library(skimr)
library(readr)
help(hilo)
google_2015 %>%
model(NAIVE(Close)) %>%
forecast(h = 10) %>%
hilo()
google_2015 %>%
model(NAIVE(Close)) %>%
forecast(h = 10) +
autoplot(google_2015) +
labs(title = "NAIVE forecast with prediction intervals")
google_2015 %>%
model(NAIVE(Close)) %>%
forecast(h = 10) %>%
autoplot(google_2015) +
labs(title = "NAIVE forecast with prediction intervals")
fit_google_Naive <- google_2015 %>%
model(NAIVE(Close))
help(generate)
google_Naive_boot <- fit_google_Naive %>%
generate(h = 30, times = 5, bootstrap = TRUE)
fit_google_Naive <- google_2015 %>%
model(NAIVE(Close))
google_Naive_boot <- fit_google_Naive %>%
generate(h = 30, times = 5, bootstrap = TRUE)
library(fabletools)
google_Naive_boot <- fit_google_Naive %>%
generate(h = 30, times = 5, bootstrap = TRUE)
google_Naive_boot <- fit_google_Naive %>%
fabletools::generate(h = 30, times = 5, bootstrap = TRUE)
google_Naive_boot
google_2015 %>%
ggplot(aes(x = day)) +
geom_line(aes(y = Close)) +
geom_line(aes(y = .sim, color = as.factor(.rep)), data = google_Naive_boot) +
guides(color = "none")
forecast_boot <- fit_google_Naive %>% forecast(h = 30, bootstrap = TRUE)
forecast_boot
autoplot(forecast_boot, google_2015)
str(forecast_boot)
forecast_boot$Close
forecast_boot$Close[10]
forecast_boot$Close[10]$x
str(forecast_boot$Close)
forecast_boot$Close[10][[1]]
forecast_boot$Close[10][[2]]
forecast_boot$Close[10][1]
forecast_boot$Close[10][2]
forecast_boot$Close[10]
forecast_boot$Close$dist
forecast_boot$Close
forecast_boot$Close[1]
str(forecast_boot$Close[1])
str(forecast_boot$Close[1]$x)
str(forecast_boot$Close[1]$dist_sample)
str(forecast_boot$Close[1])
str(forecast_boot$Close[1]@Close)
str(forecast_boot$Close[1])
pluck(forecast_boot$Close[1],1)
pluck(forecast_boot$Close[1],2)
pluck(forecast_boot$Close[1],1,x)
pluck(forecast_boot$Close[1],1,2)
pluck(forecast_boot$Close[1],1,1)
pluck(forecast_boot$Close[1],1,1,2)
pluck(forecast_boot$Close[1],1,1,1)
pluck(forecast_boot$Close[1],1,1,1,1)
str(forecast_boot$Close[10])
pluck(forecast_boot$Close[1],1,1,1,1)
samp10 <- forecast_boot$Close[10]
distributional::parameters(samp10)
distributional::parameters(samp10$x)
distributional::parameters(samp10)
distributional::parameters(samp10[1:10])
distributional::parameters(samp10) %>% unlist()
distributional::parameters(samp10) %>% as.numeric()
distributional::parameters(samp10) %>% as.data.frame()
distributional::parameters(samp10) %>% as.data.frame()
params <- distributional::parameters(samp10)
length(params)
help("unlist")
unlist(params, use.names = FALSE)
params <- distributional::parameters(samp10) %>% unlist(use.names = FALSE)
params
ggplot(aes(x = params)) + geom_histogram()
params <- distributional::parameters(samp10) %>% unlist(use.names = FALSE) %>% as_tibble()
params
params %>% ggplot(aes(x = value)) + geom_histogram()
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(fpp3)
library(tidymodels)
library(skimr)
library(readr)
help("parameters")
help(unclass)
help(vec_data)
help(RW)
hlp(drift)
help(drift)
help("drift")
transform_ex <- prices %>%
filter(!is.na(egg)) %>%
model(RW(log(eggs) ~ drift())) %>%
forecast(h = 50)
transform_ex <- prices %>%
filter(!is.na(eggs)) %>%
model(RW(log(eggs) ~ drift())) %>%
forecast(h = 50)
transform_ex
transform_ex <- transform_ex %>% mutate(.median = median(eggs))
exp(4.1)
exp(4)
autoplot(prices %>% filter(!is.na(eggs)), level = 80)
transform_ex %>% autoplot(prices %>% filter(!is.na(eggs)), level = 80)
prices %>% filter(!is.na(eggs))
autoplot(prices %>% filter(!is.na(eggs)), level = 80)
transform_ex %>% autoplot(prices %>% filter(!is.na(eggs)), level = 80)
transform_ex %>%
autoplot(prices %>% filter(!is.na(eggs)), level = 80) +
geom_line(aes(y = .median), data = transform_ex, linetype = 2, color = "blue")
us_retail_employment <- us_employment |>
filter(year(Month) >= 1990, Title == "Retail Trade")
rEmp_dcmp <- us_retail_employment %>%
model(STL(Employed ~ trend(window = 7), robust = TRUE)) %>%
components() %>%
select(-.model)
rEmp_dcmp
rEmp_dcmp %>%
model(NAIVE(seson_adjust)) %>%
forecast() %>%
autoplot(rEmp_dcmp)
rEmp_dcmp %>%
model(NAIVE(season_adjust)) %>%
forecast() %>%
autoplot(rEmp_dcmp)
rEmp_dcmp %>%
model(NAIVE(season_adjust)) %>%
forecast() %>%
autoplot(rEmp_dcmp)
us_retail_employment %>% autoplot(Employed)
help("decomposition_model")
fit_seasonal_decomp <- us_retail_employment %>%
model(stlf = decomposition_model(
STL(Employed ~ trend(window = 7), robust = TRUE),
NAIVE(season_adjust)
))
fit_seasonal_decomp
fit_seasonal_decomp %>%
forecast() %>%
autoplot(us_retail_employment)
rEmp_dcmp %>%
model(NAIVE(season_adjust)) %>%
forecast() %>%
autoplot(rEmp_dcmp) +
labs(title = "Naive forecast of Seasonally Adjusted Trend + Noise")
us_retail_employment %>% autoplot(Employed)
help(slice)
aus_production %>% n()
aus_production %>% summarise(n())
aus_production %>% group_by(year(Quarter)) %>% summarise(n())
aus_production %>% group_by(year(Quarter)) %>% summarise(n('year(Quarter)'))
help(n())
help(n)
aus_production %>% group_by(year(Quarter)) %>% n()
aus_production %>% group_by(year(Quarter)) %>% summarise(n = n())
aus_production %>% slice(n()-19:0)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
aus_production
library(fpp3)
library(tidymodels)
library(skimr)
library(readr)
recent_production <- aus_production %>%
filter(year(Quarter) >= 1992)
recent_production
recent_production %>% mutate(Year = year(Quarter)) %>% group_by(Year) %>% summarise(total_y = n())
recent_production %>% mutate(Year = year(Quarter)) %>% index_by(Year) %>% summarise(total_y = n())
aus_production %>% mutate(Year = year(Quarter)) %>% index_by(Year) %>% summarise(total_y = n())
recent_production %>% mutate(Year = year(Quarter)) %>% index_by(Year) %>% summarise(total_y = n()) %>% slice(n()-9:0)
beer_train <- recent_production %>%
filter(year(Quarter) <= 2007)
beer_fit <- beer_train %>% model(
Mean = MEAN(Beer),
Naive = NAIVE(Beer),
Sea_Naive = SNAIVE(Beer),
Drift = RW(Beer ~ drift())
)
beer_fcast <- beer_fit %>%
forecast(h = 10)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(fpp3)
library(tidymodels)
library(skimr)
library(readr)
gdppc <- global_economy %>%
mutate(GDP_PC = GDP / Population)
gdppc %>%
filter(Country == "Sweden") %>%
autoplot(GDP_PC)
timeSeries_lm <- TSLM(GDP_PC ~ trend())
timeSeries_lm_fit <- gdppc %>% model(timeSeries_lm)
timeSeries_lm_fit
timeSeries_lm_fit %>% filter(Country =="Canada") %>% report()
timeSeries_lm_fit %>% forecast(h = 3)
timeSeries_lm_fit %>% forecast(h = 3) %>%
filter(Country == "Canada") %>%
autoplot(gdppc)
bricks <- aus_production %>%
filter_index("1970 Q1" ~ "2004 Q4") %>%
select(Bricks)
train <- aus_production %>%
filter_index("1992 Q1" ~ "2006 Q4")
## Fit models
beer_fit <- train %>%
model(
Mean = MEAN(Beer),
Naive = NAIVE(Beer),
S_Naive = SNAIVE(Beer)
)
## Forecast for 14 quarters
beer_fc <- beer_fit %>% forecast(h = 14)
## Plot forecast against actual
beer_fc %>% autoplot(train, level = NULL)
beer_fc %>% autoplot(train, level = NULL) +
autolayer(
filter_index(aus_production, "2007 Q1" ~ .),
colour = "black"
)
augment(beer_fit)
google_stock <- gafa_stock %>%
filter(Symbol == "GOOG", year(Date) >= 2015) %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
# Filter the year of interest
google_2015 <- google_stock |> filter(year(Date) == 2015)
google_aug <- google_2015 %>%
model(NAIVE(Close)) %>%
augment()
autoplot(google_aug, .innov)
google_aug %>%
ggplot(aes(x = .innov)) +
geom_histogram()
google_aug %>% ACF(.innov) %>% autoplot()
google_2015 %>% model(NAIVE(Close)) %>% gg_tsresiduals()
google_aug %>% features(.innov, box_pierce, lag = 10)
google_aug %>% features(.innov, ljung_box, lag = 10)
google_fit_drift <- google_2015 %>% model(RW(Close ~ drift()))
google_fit_drift %>% tidy()
google_fit_drift %>% augment() %>% features(.innov, ljung_box, lag = 10)
google_2015 %>%
model(NAIVE(Close)) %>%
forecast(h = 10) %>%
hilo()
google_2015 %>%
model(NAIVE(Close)) %>%
forecast(h = 10) %>%
autoplot(google_2015) +
labs(title = "NAIVE forecast with prediction intervals")
library(fabletools)
fit_google_Naive <- google_2015 %>%
model(NAIVE(Close))
google_Naive_boot <- fit_google_Naive %>%
fabletools::generate(h = 30, times = 5, bootstrap = TRUE)
google_2015 %>%
ggplot(aes(x = day)) +
geom_line(aes(y = Close)) +
geom_line(aes(y = .sim, color = as.factor(.rep)), data = google_Naive_boot) +
guides(color = "none")
forecast_boot <- fit_google_Naive %>% forecast(h = 30, bootstrap = TRUE)
forecast_boot
autoplot(forecast_boot, google_2015)
str(forecast_boot$Close[10])
samp10 <- forecast_boot$Close[10]
params <- distributional::parameters(samp10) %>% unlist(use.names = FALSE) %>% as_tibble()
params %>% ggplot(aes(x = value)) + geom_histogram()
# Code used for parameters
parameters.distribution <- function(x, ...) {
x <- lapply(vec_data(x), parameters)
x <- lapply(x, function(z) data_frame(!!!z, .name_repair = "minimal"))
vec_rbind(!!!x)
}
transform_ex <- prices %>%
filter(!is.na(eggs)) %>%
model(RW(log(eggs) ~ drift())) %>%
forecast(h = 50)
transform_ex
transform_ex <- transform_ex %>% mutate(.median = median(eggs))
autoplot(prices %>% filter(!is.na(eggs)), level = 80)
transform_ex %>% autoplot(prices %>% filter(!is.na(eggs)), level = 80)
transform_ex %>%
autoplot(prices %>% filter(!is.na(eggs)), level = 80) +
geom_line(aes(y = .median), data = transform_ex, linetype = 2, color = "blue")
us_retail_employment <- us_employment |>
filter(year(Month) >= 1990, Title == "Retail Trade")
# produce seasonally adjusted data using decomposition
rEmp_dcmp <- us_retail_employment %>%
model(STL(Employed ~ trend(window = 7), robust = TRUE)) %>%
components() %>%
select(-.model)
# NAIVE forecast of seasonally adjusted data
rEmp_dcmp %>%
model(NAIVE(season_adjust)) %>%
forecast() %>%
autoplot(rEmp_dcmp) +
labs(title = "Naive forecast of Seasonally Adjusted Trend + Noise")
us_retail_employment %>% autoplot(Employed)
fit_seasonal_decomp <- us_retail_employment %>%
model(stlf = decomposition_model(
STL(Employed ~ trend(window = 7), robust = TRUE),
NAIVE(season_adjust)
))
fit_seasonal_decomp %>%
forecast() %>%
autoplot(us_retail_employment)
aus_production %>% slice(n()-19:0)
recent_production <- aus_production %>%
filter(year(Quarter) >= 1992)
# remember to use index_by with tsibbles
recent_production %>% mutate(Year = year(Quarter)) %>% index_by(Year) %>% summarise(total_y = n()) %>% slice(n()-9:0)
# so test data is essentially 2008 forwards
beer_train <- recent_production %>%
filter(year(Quarter) <= 2007)
beer_fit <- beer_train %>% model(
Mean = MEAN(Beer),
Naive = NAIVE(Beer),
Sea_Naive = SNAIVE(Beer),
Drift = RW(Beer ~ drift())
)
beer_fcast <- beer_fit %>%
forecast(h = 10)
autoplot(beer_fcast)
autoplot(beer_fcast, level = NULL)
beer_fc %>%
autoplot(
aus_production %>% filter(year(Quarter) >= 1992),
level = NULL
) +
guides(color = guide_legend(title = "Forecast"))
accuracy(beer_fcast, recent_production)
help("accuracy")
fabletools::accuracy(beer_fcast, recent_production)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
us_change
us_change %>%
pivot_longer(c(Consumption, Income), names_to = "Series")
us_change %>%
pivot_longer(c(Consumption, Income), names_to = "Series") %>%
autoplot(value)
us_change %>%
ggplot(aes(x = Income, y = Consumption)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
help(TSLM)
us_change %>%
model(TSLM(Consumption ~ Income)) %>% report()
us_change %>%
select(-c(Consumption, Income))
us_change %>%
select(-c(Consumption, Income)) %>%
pivot_longer(-Quarter)
us_change %>%
select(-c(Consumption, Income)) %>%
pivot_longer(-Quarter, names_to = "Series")
us_change %>%
select(-c(Consumption, Income)) %>%
pivot_longer(-Quarter, names_to = "Series") %>%
ggplot(aes(x = Quarter, y = value, color = Series)) +
geom_line() +
facet_grid(Series ~ ., scales = "free_y") +
guides(color = "none")
us_change %>%
GGally::ggpairs(columns = 2:6)
